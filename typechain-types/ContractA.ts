/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ContractAInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "testWithEventAddress"
      | "testWithEventAddressIndexed"
      | "testWithMultipleEvents"
      | "testWithNumber"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EventAddress"
      | "EventAddressIndexed"
      | "EventNumber"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "testWithEventAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testWithEventAddressIndexed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testWithMultipleEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testWithNumber",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "testWithEventAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testWithEventAddressIndexed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testWithMultipleEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testWithNumber",
    data: BytesLike
  ): Result;
}

export namespace EventAddressEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventAddressIndexedEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventNumberEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ContractA extends BaseContract {
  connect(runner?: ContractRunner | null): ContractA;
  waitForDeployment(): Promise<this>;

  interface: ContractAInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  testWithEventAddress: TypedContractMethod<[], [void], "nonpayable">;

  testWithEventAddressIndexed: TypedContractMethod<[], [void], "nonpayable">;

  testWithMultipleEvents: TypedContractMethod<[], [void], "nonpayable">;

  testWithNumber: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "testWithEventAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testWithEventAddressIndexed"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testWithMultipleEvents"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testWithNumber"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EventAddress"
  ): TypedContractEvent<
    EventAddressEvent.InputTuple,
    EventAddressEvent.OutputTuple,
    EventAddressEvent.OutputObject
  >;
  getEvent(
    key: "EventAddressIndexed"
  ): TypedContractEvent<
    EventAddressIndexedEvent.InputTuple,
    EventAddressIndexedEvent.OutputTuple,
    EventAddressIndexedEvent.OutputObject
  >;
  getEvent(
    key: "EventNumber"
  ): TypedContractEvent<
    EventNumberEvent.InputTuple,
    EventNumberEvent.OutputTuple,
    EventNumberEvent.OutputObject
  >;

  filters: {
    "EventAddress(address)": TypedContractEvent<
      EventAddressEvent.InputTuple,
      EventAddressEvent.OutputTuple,
      EventAddressEvent.OutputObject
    >;
    EventAddress: TypedContractEvent<
      EventAddressEvent.InputTuple,
      EventAddressEvent.OutputTuple,
      EventAddressEvent.OutputObject
    >;

    "EventAddressIndexed(address)": TypedContractEvent<
      EventAddressIndexedEvent.InputTuple,
      EventAddressIndexedEvent.OutputTuple,
      EventAddressIndexedEvent.OutputObject
    >;
    EventAddressIndexed: TypedContractEvent<
      EventAddressIndexedEvent.InputTuple,
      EventAddressIndexedEvent.OutputTuple,
      EventAddressIndexedEvent.OutputObject
    >;

    "EventNumber(uint256)": TypedContractEvent<
      EventNumberEvent.InputTuple,
      EventNumberEvent.OutputTuple,
      EventNumberEvent.OutputObject
    >;
    EventNumber: TypedContractEvent<
      EventNumberEvent.InputTuple,
      EventNumberEvent.OutputTuple,
      EventNumberEvent.OutputObject
    >;
  };
}
