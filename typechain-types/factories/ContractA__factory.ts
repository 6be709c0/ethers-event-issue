/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { ContractA, ContractAInterface } from "../ContractA";

const _abi = [
  {
    inputs: [],
    name: "ContractA__AnyError",
    type: "error",
  },
  {
    inputs: [],
    name: "ContractA__BnyError",
    type: "error",
  },
  {
    inputs: [],
    name: "helloWorld",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "helloWorld2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e18061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636cdc3ce3146037578063c605f76c14603f575b600080fd5b603d6047565b005b60456079565b005b6040517f8afcce3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fd02b4e7700000000000000000000000000000000000000000000000000000000815260040160405180910390fdfea264697066735822122037c018f82d43712719a544cb45c1edd84c555486ea17d2396ae24ba824a6e6b164736f6c63430008120033";

type ContractAConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractAConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContractA__factory extends ContractFactory {
  constructor(...args: ContractAConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ContractA & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ContractA__factory {
    return super.connect(runner) as ContractA__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractAInterface {
    return new Interface(_abi) as ContractAInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ContractA {
    return new Contract(address, _abi, runner) as unknown as ContractA;
  }
}
